[실습 목표]
- mybatis 퍼시스턴스(persistence) 프레임워크 적용
  
[OOP vs CBD vs Framework]
클래스: 변수와 메서드의 묶음. 
컴포넌트: 한 개 이상의 클래스의 묶음. 업무 로직의 기능을 수행.
설계 패턴: 특정 문제를 해결할 때 널리 사용되는 설계 방법론. 검증된 설계 기법. 

OOP: 클래스를 조립하여 애플리케이션 만들자!
CBD(Component-based Development): 중간 부품을 조립하여 애플리케이션을 만들자.
Framework: 어느 정도 애플리케이션의 골격을 준비한 다음, 필요한 부품을 꼽아서 애플리케이션을 만들자.
 

          [OOP]                [CBD]               [Framework]
기본 단위:  클래스                 컴포넌트              클래스 + 컴포넌트 + 설계 패턴

생활 개념:  다이오드, 저장, 납,      메인보드, 랜카드,       베어본(프레임워크),        
          나사, 칩, 트랜지스터 등   VGA 카드, 모듈램,       CPU(클래스),
                               케이스, 전원공급기 등    모듈램(컴포넌트) 등 
                               
속도:      가장 느리다             빠르다               가장 빠르다

난이도:    가장 어렵다             중간                 쉽다
  
개발자:     고급                 중급, 초급             초급

안정성:     개발자의 역량에 영향     중간, 컴포넌트 별로      최소한의 품질을 보장한다.
                              테스트 완료 했음.                          
                              
[퍼시스턴스 프레임워크]
- 데이터의 보관을 처리하는 기능을 수행.
1) SQL 맵퍼
  => SQL을 별도의 파일로 분리해놓고, 프레임워크에서 제공하는 클래스를 사용하여 
     SQL문을 실행한다.
  => SQL문을 개발자가 직접 작성한다. 
     단점: 개발자가 SQL문을 알아야 한다. DBMS 마다 SQL문을 따로 관리해야 한다.
     장점: DBMS 고유의 기능을 100% 활용할 수 있어, 최적화된 질의를 수행할 수 있다.
          기존의 시스템(레거시 시스템)이 사용하는 테이블을 직접 활용하기 쉽다. 
  => 대표 제품: mybatis
          
2) OR 맵퍼                              
  => 테이블의 데이터를 객체로 다룬다.
  => 객체 질의 전용 문법이 제공된다. 예) HQL(Hibernate Query Language)
  => SQL문과 유사하다.
  => 실제 실행할 때는 프레임워크에서 객체 질의어를 SQL문으로 자동 변환한 다음에 실행한다.
     장점: 개발자가 SQL문을 몰라도 된다. DBMS마다 SQL문을 따로 관리하지 않아도 된다.
     단점: DBMS 고유 기능을 100% 활용할 수 없다. 
          객체로 다룰 수 있도록 DB의 정규화가 잘 되어 있어야 한다.
          기존 시스템이 사용하는 테이블과의 연동이 어렵다.
  => 대표 제품: hibernate, toplink
  
[mybatis 프레임워크 사용 준비]
  
          
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 